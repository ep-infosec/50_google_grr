syntax = "proto2";

package grr;

import "grr_response_proto/semantic.proto";

// A message representing arguments for the API method that exports timeline
// entries.
message ApiGetCollectedTimelineArgs {
  // A enumeration representing all possible output formats that timeline
  // entries can be exported into.
  enum Format {
    // Unspecified format.
    UNSPECIFIED = 0;

    // The Sleuthkit's body file format [1].
    //
    // Note that file hashes are not collected, so the MD5 column will be set to
    // 0 when exported to this format. Similarly, the rdev information is not
    // gathered either so this column will be set to 0 as well.
    //
    // [1]: https://wiki.sleuthkit.org/index.php?title=Body_file
    BODY = 1;

    // Raw timeline protobufs as stored in the database.
    //
    // Timeline in this formats simply follows the internal GRR representation
    // and might be useful in cases where e.g. other format are too verbose. In
    // order to open files in this format some additional tooling is required,
    // so it is best suited for consumption by scripts and alike.
    //
    // The stream of timeline entry protobufs in sent in the gzchunked format.
    // GRR provides a module for working files stored in this format and the
    // implementation should be used as a reference for porting it to different
    // languages.
    RAW_GZCHUNKED = 2;
  }

  // An identifier of the client for which to retrieve results.
  optional string client_id = 1 [(sem_type) = { type: "ApiClientId" }];

  // An identifier of the timeline flow for which to retrieve results.
  optional string flow_id = 2 [(sem_type) = { type: "ApiFlowId" }];

  // A format in which to retrieve timeline entries.
  optional Format format = 3;

  // Options for timelines exported in the body file format.
  optional ApiTimelineBodyOpts body_opts = 4;
}

// A message representing arguments for the API method that exports results of
// a timeline hunt.
message ApiGetCollectedHuntTimelinesArgs {
  // An identifier of the hunt for which to retrieve results.
  optional string hunt_id = 1;

  // A format in which to retrieve timeline entries.
  optional ApiGetCollectedTimelineArgs.Format format = 2;

  // Options for timelines exported in the body file format.
  optional ApiTimelineBodyOpts body_opts = 4;
}

// A message with various options that configure shape of exported timelines in
// the body file format.
message ApiTimelineBodyOpts {
  // Whether to use floating point subsecond precision for timestamps.
  optional bool timestamp_subsecond_precision = 1;

  // Whether to use the NTFS file reference format for inode values.
  //
  // The NTFS file reference is a pair of the file record number in the MFT and
  // its sequence number [1]. A textual representation of it is a dash-delimited
  // string of these two values (e.g. `1337-42`).
  //
  // TODO: Deprecate this field as we are able to automatically
  // detect the filesystem now.
  //
  // [1]: https://flatcap.org/linux-ntfs/ntfs/concepts/file_reference.html
  optional bool inode_ntfs_file_reference_format = 2;

  // Whether backslashes (e.g. in Windows paths) should be escaped.
  //
  // By default, backslashes are not escaped and are passed as is. This makes it
  // more natural to read things like Windows paths. However, some tools treat
  // backslashes in special way and it makes processing Windows paths actually
  // harder or even impossible.
  //
  // This flag will cause each backslash in the original path to be prepended
  // with one extra backslash.
  optional bool backslash_escape = 3;

  // Whether carriage return character [1] should be escaped.
  //
  // By default, carriage return character is not escaped and is emitted in the
  // output as is. This is because the official specification does not specify
  // what to do with it and tools in general should not assume much about bytes
  // in the path. However, sometimes (e.g. for Windows-specific tools) it might
  // be more appropriate to actually escape this character.
  //
  // The flag will cause the carriage return byte (0x0D) to be replaced with
  // '\r' (a backslash followed by the 'r' character).
  //
  // [1]: https://en.wikipedia.org/wiki/Carriage_return
  optional bool carriage_return_escape = 4;

  // Whether non-printable ASCII characters [1] should be escaped.
  //
  // Some tools have problems with correctly displaying the body file when the
  // output contains ASCII control characters (e.g. null, escape or delete).
  // This option can be used to bypass these limitations.
  //
  // The flag will cause all non-printable characters to be displayed using the
  // '\x##' format (e.g. the cancel character with codepoint 0x18 will show up
  // as '\x18'.
  //
  // [1]: https://en.wikipedia.org/wiki/ASCII#Control_characters
  optional bool non_printable_escape = 5;
}
