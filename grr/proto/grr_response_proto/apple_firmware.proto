syntax = "proto2";

package grr;

import "grr_response_proto/jobs.proto";
import "grr_response_proto/semantic.proto";

message EficheckConfig {
  reserved 1;
  optional string cmd_path = 2;
}

message CollectEfiHashesResponse {
  optional string eficheck_version = 1;
  optional string boot_rom_version = 2;
  optional ExecuteBinaryResponse response = 3;
}

message DumpEfiImageResponse {
  optional string eficheck_version = 1;
  optional PathSpec path = 2 [(sem_type) = {
    description: "Temporary path to the flash image.",
  }];
  optional ExecuteBinaryResponse response = 3;
}

message EficheckFlowArgs {
  reserved 1;
  optional string cmd_path = 2
      [default = "/usr/libexec/firmwarecheckers/eficheck/eficheck"];
}

message EfiCollection {
  optional string eficheck_version = 1 [(sem_type) = {
    description: "Version of eficheck used to collect the data."
  }];
  optional string boot_rom_version = 2
      [(sem_type) = { description: "Boot ROM version." }];
  repeated EfiEntry entries = 3
      [(sem_type) = { description: "The hashes of the collection." }];
}

message EfiEntry {
  optional uint32 volume_type = 1
      [(sem_type) = { description: "The volume type." }];
  optional uint64 address = 2
      [(sem_type) = { description: "The entry address." }];
  optional uint32 size = 3 [(sem_type) = { description: "The entry size." }];
  optional string guid = 4 [(sem_type) = { description: "The EFI GUID." }];
  optional string hash = 5 [(sem_type) = { description: "The hash value." }];
  optional uint32 flags = 6 [(sem_type) = {
    description: "A bit field of flags that describe the volume "
                 "(known=1, volatile=2, ffs=4)."
  }];
  optional uint32 index = 7
      [(sem_type) = { description: "The entry's volume index." }];
}
